
#######################################################################
Please cite the following paper when using nnU-Net:
Isensee, F., Jaeger, P. F., Kohl, S. A., Petersen, J., & Maier-Hein, K. H. (2021). nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation. Nature methods, 18(2), 203-211.
#######################################################################
 
2025-02-25 07:08:32.259164: Using torch.compile... 
2025-02-25 07:08:49.309916: do_dummy_2d_data_aug: False 
2025-02-25 07:09:05.426004: Using splits from existing split file: /content/drive/MyDrive/nnUNet/nnUNet_preprocessed/Dataset002_BoneScanPosterior/splits_final.json 
2025-02-25 07:09:06.303415: The split file contains 1 splits. 
2025-02-25 07:09:06.307029: Desired fold for training: 0 
2025-02-25 07:09:06.309091: This split has 1576 training and 88 validation cases. 

This is the configuration used by this training:
Configuration name: 2d
 {'data_identifier': 'nnUNetPlans_2d', 'preprocessor_name': 'DefaultPreprocessor', 'batch_size': 48, 'patch_size': [512, 128], 'median_image_size_in_voxels': [512.0, 128.0], 'spacing': [1.0, 1.0], 'normalization_schemes': ['ZScoreNormalization'], 'use_mask_for_norm': [False], 'resampling_fn_data': 'resample_data_or_seg_to_shape', 'resampling_fn_seg': 'resample_data_or_seg_to_shape', 'resampling_fn_data_kwargs': {'is_seg': False, 'order': 3, 'order_z': 0, 'force_separate_z': None}, 'resampling_fn_seg_kwargs': {'is_seg': True, 'order': 1, 'order_z': 0, 'force_separate_z': None}, 'resampling_fn_probabilities': 'resample_data_or_seg_to_shape', 'resampling_fn_probabilities_kwargs': {'is_seg': False, 'order': 1, 'order_z': 0, 'force_separate_z': None}, 'architecture': {'network_class_name': 'dynamic_network_architectures.architectures.unet.PlainConvUNet', 'arch_kwargs': {'n_stages': 7, 'features_per_stage': [32, 64, 128, 256, 512, 512, 512], 'conv_op': 'torch.nn.modules.conv.Conv2d', 'kernel_sizes': [[3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3]], 'strides': [[1, 1], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 1]], 'n_conv_per_stage': [2, 2, 2, 2, 2, 2, 2], 'n_conv_per_stage_decoder': [2, 2, 2, 2, 2, 2], 'conv_bias': True, 'norm_op': 'torch.nn.modules.instancenorm.InstanceNorm2d', 'norm_op_kwargs': {'eps': 1e-05, 'affine': True}, 'dropout_op': None, 'dropout_op_kwargs': None, 'nonlin': 'torch.nn.LeakyReLU', 'nonlin_kwargs': {'inplace': True}}, '_kw_requires_import': ['conv_op', 'norm_op', 'dropout_op', 'nonlin']}, 'batch_dice': True} 
 
These are the global plan.json settings:
 {'dataset_name': 'Dataset002_BoneScanPosterior', 'plans_name': 'nnUNetPlans', 'original_median_spacing_after_transp': [999.0, 1.0, 1.0], 'original_median_shape_after_transp': [1, 512, 128], 'image_reader_writer': 'NaturalImage2DIO', 'transpose_forward': [0, 1, 2], 'transpose_backward': [0, 1, 2], 'experiment_planner_used': 'ExperimentPlanner', 'label_manager': 'LabelManager', 'foreground_intensity_properties_per_channel': {'0': {'max': 255.0, 'mean': 217.958740234375, 'median': 228.0, 'min': 0.0, 'percentile_00_5': 84.0, 'percentile_99_5': 255.0, 'std': 33.05488586425781}}} 
 
2025-02-25 07:10:26.380716: unpacking dataset... 
2025-02-25 07:11:54.819981: unpacking done... 
2025-02-25 07:11:56.543271: Unable to plot network architecture: nnUNet_compile is enabled! 
2025-02-25 07:11:56.874713:  
2025-02-25 07:11:56.908041: Epoch 14 
2025-02-25 07:11:56.912909: Current learning rate: 0.00987 
2025-02-25 07:21:30.277295: train_loss -0.6939 
2025-02-25 07:21:30.298841: val_loss -0.6384 
2025-02-25 07:21:30.304180: Pseudo dice [0.9524, 0.8367, 0.8599, 0.9056, nan, 0.4581, 0.8723, 0.8707, 0.845, 0.8061, 0.8996, 0.887] 
2025-02-25 07:21:30.310595: Epoch time: 573.41 s 
2025-02-25 07:21:30.316320: Yayy! New best EMA pseudo Dice: 0.7014 
2025-02-25 07:21:36.411414:  
2025-02-25 07:21:36.418557: Epoch 15 
2025-02-25 07:21:36.425544: Current learning rate: 0.00986 
